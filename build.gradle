plugins {
    id 'java'
}

group 'cn.zull.mock.netty'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

// 全局扩展配置
ext {
    spring_boot_version = '2.1.3.RELEASE'
    spring_io_version = '1.0.0.RELEASE'

    netty_version = '4.1.37.Final'
    redisson_version = '3.10.5'
    lombok_version = '1.18.2'
    druid_version = '1.1.9'
    fastjson_version = '1.2.58'
//    kryo序列化,dubbo用
    kryo_version = '0.42'
    tracing_version = '0.0.12-RELEASE'
//    数据库版本控制
    flyway_version = '5.0.3'
    zookeeper_version = '3.4.6'
    zkclient_version = '0.1'
    jedis_version = '2.9.0'
    dubbo_version = '0.2.0'
}

allprojects {


    group 'cn.zull.netty.demo'
    version '1.0-SNAPSHOT'
    sourceCompatibility = 1.8

    buildscript {
        // 全局插件所用的仓库
        repositories {
            maven { url 'http://maven.iflytek.com:8081/nexus/content/groups/public' }
            maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
            maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        }

        // 全局插件依赖
        dependencies {
//            classpath "io.spring.gradle:dependency-management-plugin:${spring_io_version}"
            classpath("org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}")
        }

        // 配置全局默认插件
        apply plugin: 'java'
        apply plugin: 'idea'
//        apply plugin: 'org.springframework.boot'
//        apply plugin: 'io.spring.dependency-management'

        // 配置源代码和生成目标的语言版本
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    // 指定字符集
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    // 依赖的更新与缓存
//    configurations.all {
//        resolutionStrategy.cacheChangingModulesFor 0, java.util.concurrent.TimeUnit.SECONDS
//        resolutionStrategy.cacheDynamicVersionsFor 0, java.util.concurrent.TimeUnit.SECONDS
//    }

    // 全局依赖
    dependencies {

        compile("org.springframework.boot:spring-boot-starter-web:${spring_boot_version}")
        compileOnly("org.projectlombok:lombok:${lombok_version}")
        compile("com.alibaba:fastjson:${fastjson_version}")

        //compile(group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.13')
        testCompile("org.springframework.boot:spring-boot-starter-test:${spring_boot_version}")
        testCompileOnly("org.projectlombok:lombok:${lombok_version}")
    }

    // 全局依赖所用的仓库
    repositories {
        // 使用本地仓库
        mavenLocal()
        maven { url 'http://maven.iflytek.com:8081/nexus/content/groups/public' }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
    }

    // 增加全局configurationName
    configurations {
    }

    // 指定所使用的资源
    sourceSets {
        main {
            resources {
                srcDirs = ['src/main/resources/common', "src/main/resources/${getProperty('package.environment')}"]
            }
        }
    }
    // 排除依赖
    configurations {
//        all*.exclude(group: 'org.slf4j', module: 'slf4j-log4j12')
//        all*.exclude(group: 'log4j', module: 'log4j')
    }
}

